{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 ///////// bufs\cf0 \
~ezv_numbufs = 6;\
~ezv_buflen = 30.0;\
~ezv_buf = \cf3 Array\cf0 .fill(~ezv_numbufs, \{ \cf3 Buffer\cf0 .alloc(s, ~ezv_buflen * s.sampleRate, 1) \});\
\
\cf2 ///////// busses\cf0 \
~ezv_buf_b =\cf3 Array\cf0 .fill(~ezv_numbufs, \{\cf3 Bus\cf0 .audio(s, 1)\});\
~ezv_buf_master_b = \cf3 Bus\cf0 .audio(s, 1);\
\cf2 //// here is a good point for "per-voice" processing of the buffering synths\cf0 \
~ezv_buf_p = \cf3 Array\cf0 .fill(~ezv_numbufs, \{\cf3 |i|\cf0  \cf3 Synth\cf0 .new(\cf4 \\patch\cf0 , [\cf4 \\in\cf0 , ~ezv_buf_b[i].index, \cf4 \\out\cf0 , ~ezv_buf_master_b.index], ~proc_g, \cf4 \\addAfter\cf0 ) \});\
\
~ezv_buf_master_p = \cf3 Synth\cf0 .new(\cf4 \\patch\cf0 , [\cf4 \\in\cf0 , ~ezv_buf_master_b.index, \cf4 \\out\cf0 , ~master_out_b.index], ~out_g, \cf4 \\addBefore\cf0 );\
~ezv_buf_master_limit = \cf3 Synth\cf0 .new(\cf4 \\limit_insert\cf0 , [\cf4 \\bus\cf0 , ~ezv_buf_master_b.index, \cf4 \\limthresh\cf0 , -10.dbamp,\
	\cf4 \\clamptime\cf0 , 0.02, \cf4 \\relaxtime\cf0 , 0.03], ~ezv_buf_master_p, \cf4 \\addBefore\cf0 );\
\
\cf2 ///////// synths\cf0 \
\
~ezv_rec = \cf3 Array\cf0 .fill(~ezv_numbufs, \{\
	\cf3 arg\cf0  i;\
	i.postln;\
	\cf3 Synth\cf0 .new(\cf4 \\rec\cf0 , [\cf4 \\in\cf0 , ~ezv_b.index, \cf4 \\buf\cf0 , ~ezv_buf[i].bufnum, \cf4 \\run\cf0 , \cf3 false\cf0 ], ~proc_g, \cf4 \\addBefore\cf0 );\
\});\
\
~ezv_play = \cf3 Array\cf0 .fill(~ezv_numbufs, \{\
	\cf3 arg\cf0  i;\
	\cf3 Synth\cf0 .newPaused(\cf4 \\play\cf0 , [\cf4 \\out\cf0 , ~ezv_buf_b[i].index, \cf4 \\buf\cf0 , ~ezv_buf[i].bufnum], ~proc_g, \cf4 \\addToTail\cf0 );\
\});\
\
\
\
\cf2 /////// functions for gui\cf0 \
\
~ezv_whichbuf_rec = 0;\
\
~recTog = \cf3 false\cf0 ;\
~recTime = 1.0;\
\
~rectog_func = \{\
	if (~recTog == \cf3 false\cf0 , \{\
		\cf3 SystemClock\cf0 .sched(0.0, \{\cf3 arg\cf0  time;\
			~recTog = \cf3 true\cf0 ;\
			~recTime = time;\
			~startRecording.value;\
			~box.value(0, \cf3 Color\cf0 .red);\
		\cf3 nil\cf0 \});\
	\}, \{\
		\cf3 SystemClock\cf0 .sched(0.0, \{\cf3 arg\cf0  time;\
			~recTog = \cf3 false\cf0 ;\
			~recTime = time - ~recTime;\
			~stopRecording.value(~recTime);\
			~box.value(0, \cf3 Color\cf0 .black);\
		\cf3 nil\cf0 \});\
	\}); \cf2 // if rectog\cf0 \
\};\
\
~startRecording = \{\
	~ezv_whichbuf_rec = (~ezv_whichbuf_rec  + 1) % ~ezv_numbufs;\
	(\cf5 "recording : "\cf0  ++ ~ezv_whichbuf_rec).postln;\
	~ezv_play[~ezv_whichbuf_rec].run(\cf3 false\cf0 );\
	~ezv_rec[~ezv_whichbuf_rec].set(\cf4 \\run\cf0 , \cf3 true\cf0 );\
	\cf3 Routine\cf0  \{\
		~ezv_rec[~ezv_whichbuf_rec].set(\cf4 \\trig\cf0 , 0);\
		s.sync;\
		~ezv_rec[~ezv_whichbuf_rec].set(\cf4 \\trig\cf0 , 1);\
	\}.play;\
\};\
\
~stopRecording = \{ \cf3 arg\cf0  dur;\
	(\cf5 "storing : "\cf0  ++ ~ezv_whichbuf_rec ++ \cf5 " "\cf0  ++ dur.min(~ezv_buflen)).postln;\
	~ezv_rec[~ezv_whichbuf_rec].set(\cf4 \\run\cf0 , \cf3 false\cf0 );\
	~ezv_play[~ezv_whichbuf_rec].run(\cf3 true\cf0 );\
	~ezv_play[~ezv_whichbuf_rec].set(\cf4 \\dur\cf0 , dur.min(~ezv_buflen));\
	~ezv_durs[~ezv_whichbuf_rec] = dur.min(~ezv_buflen);\
\};\
\
~stop_playing_func = \{\
	~ezv_buf.do(\{\cf3 arg\cf0  buf; buf.zero;\});	\
\};\
\
~clearbuf = \{\
	~ezv_buf[~ezv_whichbuf_rec].zero;\
	~ezv_durs[~ezv_whichbuf_rec] = 1.00;\
	~ezv_whichbuf_rec = (~ezv_whichbuf_rec - 1) % ~ezv_numbufs; \
\};\
\
\
\cf2 /////// sequence\cf0 \
\
~ezv_whichbuf_seq = 0;\
~ezv_durs = \cf3 Array\cf0 .fill(~ezv_numbufs, \{~ezv_buflen\});\
\
~buf_seq_overlap = 0.4;\
\
~buf_seq = \cf3 Task\cf0 (\{ \cf3 inf\cf0 .do (\{\
	\cf3 var\cf0  thedur;\
	~ezv_whichbuf_seq = (~ezv_whichbuf_seq + 1) % ~ezv_numbufs;\
	(\cf5 "sequencing: "\cf0  ++ ~ezv_whichbuf_seq).post;\
	\cf3 Routine\cf0  \{\
		~ezv_play[~ezv_whichbuf_seq].set(\cf4 \\trig\cf0 , 0);\
		s.sync;\
		~ezv_play[~ezv_whichbuf_seq].set(\cf4 \\trig\cf0 , 1);\
	\}.play;\
	thedur = [~ezv_durs[(~ezv_whichbuf_seq - 1) % ~ezv_numbufs], (~ezv_durs[~ezv_whichbuf_seq])].choose.min\
		([~ezv_durs[(~ezv_whichbuf_seq - 1) % ~ezv_numbufs], (~ezv_durs[~ezv_whichbuf_seq])].choose);\
	(\cf5 " "\cf0  ++ thedur).postln;\
	(thedur * ~buf_seq_overlap).wait;\
\}) \});\
\
~buf_seq.play(\cf3 SystemClock\cf0 );\
\
\cf2 /*\
~buf_seq.stop;\
*/}