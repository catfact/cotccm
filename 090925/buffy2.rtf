{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red0\green115\blue0;\red96\green96\blue96;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 ///////// bufs\cf3 \
~ezv_numbufs = 4;\
~ezv_buflen = 30.0;\
~ezv_buf = \cf4 Array\cf3 .fill(~ezv_numbufs, \{ \cf4 Buffer\cf3 .alloc(s, ~ezv_buflen * s.sampleRate, 1) \});\
\
\
\cf2 ///////// synths\cf3 \
\
~ezv_rec = \cf4 Array\cf3 .fill(~ezv_numbufs, \{\
	\cf4 arg\cf3  i;\
	i.postln;\
	\cf4 Synth\cf3 .new(\cf5 \\rec\cf3 , [\cf5 \\in\cf3 , ~ezv_b.index, \cf5 \\buf\cf3 , ~ezv_buf[i].bufnum, \cf5 \\run\cf3 , \cf4 false\cf3 ], ~proc_g, \cf5 \\addBefore\cf3 );\
\});\
\
~ezv_play = \cf4 Array\cf3 .fill(~ezv_numbufs, \{\
	\cf4 arg\cf3  i;\
	\cf4 Synth\cf3 .newPaused(\cf5 \\play\cf3 , [\cf5 \\buf\cf3 , ~ezv_buf[i].bufnum], ~proc_g, \cf5 \\addToTail\cf3 );\
\});\
\
\
\
\cf2 /////// functions for gui\cf3 \
\
~ezv_whichbuf_rec = 0;\
\
~startRecording = \{\
	~ezv_whichbuf_rec = (~ezv_whichbuf_rec  + 1) % ~ezv_numbufs;\
	(\cf6 "recording : "\cf3  ++ ~ezv_whichbuf_rec).postln;\cf0 \
	~ezv_play[~ezv_whichbuf_rec].run(\cf7 false\cf0 );\cf3 \
	~ezv_rec[~ezv_whichbuf_rec].set(\cf5 \\run\cf3 , \cf4 true\cf3 );\
	\cf4 Routine\cf3  \{\
		~ezv_rec[~ezv_whichbuf_rec].set(\cf5 \\trig\cf3 , 0);\
		s.sync;\
		~ezv_rec[~ezv_whichbuf_rec].set(\cf5 \\trig\cf3 , 1);\
	\}.play;\
\};\
\
~stopRecording = \{ \cf4 arg\cf3  dur;\
	(\cf6 "storing : "\cf3  ++ ~ezv_whichbuf_rec).postln;\
	~ezv_rec[~ezv_whichbuf_rec].set(\cf5 \\run\cf3 , \cf4 false\cf3 );\
	~ezv_play[~ezv_whichbuf_rec].run(\cf4 true\cf3 );\
	~ezv_play[~ezv_whichbuf_rec].set(\cf5 \\dur\cf3 , dur.min(~ezv_buflen));\
	~ezv_durs[~ezv_whichbuf_rec] = dur.min(~ezv_buflen);\
	\cf2 /*\
	Routine \{\
		~ezv_play[~ezv_whichbuf].set(\\trig, 0);\
		s.sync;\
		~ezv_play[~ezv_whichbuf].set(\\trig, 1);\
	\}.play;\
	*/\cf3 \
\};\
\
\
\
\
\cf2 /////// sequence\cf3 \
\
~ezv_whichbuf_seq = 0;\
~ezv_durs = \cf4 Array\cf3 .fill(~ezv_numbufs, \{~ezv_buflen\});\
\
~buf_seq = \cf4 Task\cf3 (\{ \cf4 inf\cf3 .do (\{\
	~ezv_whichbuf_seq = (~ezv_whichbuf_seq + 1) % ~ezv_numbufs;\
	(\cf6 "sequencing: "\cf3  ++ ~ezv_whichbuf_seq).postln;\
	\cf4 Routine\cf3  \{\
		~ezv_play[~ezv_whichbuf_seq].set(\cf5 \\trig\cf3 , 0);\
		s.sync;\
		~ezv_play[~ezv_whichbuf_seq].set(\cf5 \\trig\cf3 , 1);\
	\}.play;\
	(~ezv_durs[(~ezv_whichbuf_seq - 1) % ~ezv_numbufs].max(~ezv_durs[~ezv_whichbuf_seq]) * 0.5).wait;\
\}) \});\
\
~buf_seq.play(\cf4 SystemClock\cf3 );\
\
\cf2 /*\
~buf_seq.stop;\
*/}