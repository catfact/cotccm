{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 ~chop = \cf3 Array\cf2 .fill(~ezv_numbufs, \{\cf3 |i|\cf2 \
	\cf3 Synth\cf2 .new(\cf4 \\sine_chop\cf2 , [\cf4 \\bus\cf2 , ~ezv_buf_b[i].index, \cf4 \\lo\cf2 , -34.dbamp, \cf4 \\hi\cf2 , -6.dbamp], ~proc_g, \cf4 \\addToTail\cf2 );\
\});\
\
~chopflags = \cf3 Array\cf2 .fill(~ezv_numbufs, \{\cf3 |i|\cf2 \
	\cf3 true\cf2 \
\});\
\
~togchop = \{\cf3 arg\cf2  which;\
	(\cf5 "togchop "\cf2 ++which).postln;\
	if(~chopflags[which], \{\
		~chopflags[which] = \cf3 false\cf2 ;\
		~box.value(which+1, \cf3 Color\cf2 .grey);\
	\}, \{\
		~chopflags[which] = \cf3 true\cf2 ;\
		~box.value(which+1, \cf3 Color\cf2 .green);\
	\});	\cf0 \
	~chop[which].run(~chopflags[which]);\cf2 \
\};\
\
~chop.do(\{\cf3 |syn, i|\cf2  syn.set(\cf4 \\osclag\cf2 , 0.1 * i * 2);\});\
~chop.do(\{\cf3 |syn, i|\cf2  syn.set(\cf4 \\hi\cf2 , -4.dbamp);\});\
~chop.do(\{\cf3 |syn, i|\cf2  syn.set(\cf4 \\range\cf2 , -60.dbamp);\});\
\
\cf6 /*\
~chop[0].set(\\hi,-14.dbamp);\
~chop[1].set(\\hi,-24.dbamp);\
~chop[2].set(\\hi,-28.dbamp);\
~chop[3].set(\\hi,-14.dbamp);\
~chop[4].set(\\hi,-18.dbamp);\
~chop[5].set(\\hi,-13.dbamp);\
\
~chop[0].set(\\tune, 1.0);\
~chop[1].set(\\tune, 2.0);\
~chop[2].set(\\tune, 1.0);\
~chop[3].set(\\tune, 0.5);\
*/\cf2 \
\
~chop[0].set(\cf4 \\osc_amp\cf2 , 0.25);\
~chop[1].set(\cf4 \\osc_amp\cf2 , 0.35);\
~chop[2].set(\cf4 \\osc_amp\cf2 , 0.45);\
~chop[3].set(\cf4 \\osc_amp\cf2 , 0.15);\
~chop[4].set(\cf4 \\osc_amp\cf2 , 0.25);\
~chop[5].set(\cf4 \\osc_amp\cf2 , 0.35);\
\
\
\cf6 /*\
	\
~chop = Array.newClear(4);\
~chop[0] = Synth.new(\\sine_chop, [\\bus, ~ezv_buf_b[0].index, \\hi, -12.dbamp], ~proc_g, \\addToTail);\
~chop[1] = Synth.new(\\sine_chop, [\\bus, ~ezv_buf_b[1].index, \\hi, -12.dbamp], ~proc_g, \\addToTail);\
~chop[2] = Synth.new(\\sine_chop, [\\bus, ~ezv_buf_b[2].index, \\hi, -12.dbamp], ~proc_g, \\addToTail);\
~chop[3] = Synth.new(\\sine_chop, [\\bus, ~ezv_buf_b[3].index, \\hi, -12.dbamp], ~proc_g, \\addToTail);\
\
~chop[3] = Synth.new(\\sine_chop, [\\bus, ~ezv_buf_b[3].index, \\lo, -34.dbamp, \\hi, -12.dbamp], ~proc_g, \\addToTail);\
\
~chop[0].free;\
~chop[1].free;\
~chop[2].free;\
~chop[3].free;\
~chop[4].free;\
~chop[5].free;\
\
~chop[0].run(false);\
~chop[1].run(false);\
~chop[2].run(false);\
~chop[3].run(false);\
\
~chop[0].run(true);\
~chop[1].run(true);\
~chop[2].run(true);\
~chop[3].run(true);\
\
\
~ezv_buf_b[3].index\
\
\
~chop.do(\{|syn| syn.free;\});\
\
\
~chop.do(\{|syn| syn.set(\\lo, -30.dbamp, \\hi, -6.dbamp);\});\
\
~chop0.free;\
~chop1.free;\
~chop2.free;\
~chop3.free;\
\
~chop = Synth.new(\\sine_chop, [\\bus, ~ezv_buf_master_b.index, \\lo, -34.dbamp, \\hi, -26.dbamp], ~ezv_buf_master_p, \\addBefore);\
~proc_g, \\addToTail);\
~chop.set(\\hi, -16.dbamp);\
~chop.set(\\osclag, 0.1);\
~chop.free;\
\
~ezv_buf_b[0]\
~ezv_buf_b[1]\
~ezv_buf_b[2]\
~ezv_buf_b[3]\
\
*/\cf2 \
\cf6 /*\
\
Server.internal.queryAllNodes\
\
*/\cf2 \
}