//Server.killAll

~ratios = 

[

3,1.875,1.421875,3.953125,7.703125,1.125,4.375,2.234375,6.109375,2.625,6.875,3.453125,4.125,1.328125,6.375,4.125,1.328125,2.625,6.875,3.453125,1.125,4.375,2.234375,6.109375,3,1.875,1.421875,3.953125,7.703125,3,1.875,1.421875,3.953125,7.703125,1.125,4.375,2.234375,6.109375,2.625,6.875,3.453125,4.125,1.328125,6.375,4.125,1.328125,2.625,6.875,3.453125,1.125,4.375,2.234375,6.109375,3,1.875,1.421875,3.953125,7.703125,3,1.875,1.421875,3.953125,7.703125,1.125,4.375,2.234375,6.109375,2.625,6.875,3.453125,4.125,1.328125,6.375,4.125,1.328125,2.625,6.875,3.453125,1.125,4.375,2.234375,6.109375,3,1.875,1.421875,3.953125,7.703125,3,1.875,1.421875,3.953125,7.703125,1.125,4.375,2.234375,6.109375,2.625,6.875,3.453125,4.125,1.328125,6.375,4.125,1.328125,2.625,6.875,3.453125,1.125,4.375,2.234375,6.109375,3,1.875,1.421875,3.953125,7.703125,3,1.875,1.421875,3.953125,7.703125,1.125,4.375,2.234375,6.109375,2.625,6.875,3.453125,4.125,1.328125,6.375,4.125,1.328125,2.625,6.875,3.453125,1.125,4.375,2.234375,6.109375,3,1.875,1.421875,3.953125,7.703125,3,1.875,1.421875,3.953125,7.703125,1.125,4.375,2.234375,6.109375,2.625,6.875,3.453125,4.125,1.328125,6.375,4.125,1.328125,2.625,6.875,3.453125,1.125,4.375,2.234375,6.109375,3,1.875,1.421875,3.953125,7.703125,3,1.875,1.421875,3.953125,7.703125,1.125,4.375,2.234375,6.109375,2.625,6.875,3.453125,4.125,1.328125,6.375,4.125,1.328125,2.625
];

//~ratios.size
//16*12

s = Server.local.waitForBoot {
	
	~gridw = 16;
	~gridh = 12;
	
	
	
	
	//~xratios = [3/4, 4/5, 8/9, 9/8, 5/4, 4/3];
	//~yratios = [7.0, 5.0, 3.0, 2.0];
	
	
	
	~basehz = 220;
	
	~rfunc = { arg msg;
		var amp;
//		if (msg[3] > 0.0000, {		 msg.postln; });
		amp = ((1.0 - msg[3]) * -12).dbamp;
		if (msg[3] < 0.0001, { amp = 0.0; });
		~sines[msg[1]][msg[2]].set(\amp, amp * 8.0 * (1.0 / (12 * 16)));
		
	};
	
	
	~rfunc = { arg msg;
		var amp;
		~sines[msg[1]][msg[2]].set(\amp, msg[3]);
		
	};
	

//~sines[15][0]
//~ratios[16]

/*
~rfunc = {};	
*/

	~responder = OSCresponderNode(nil, '/grid/unit', { arg t, r, msg;
		~rfunc.value(msg);
	}).add;
	
	SynthDef.new(\sine, {arg amp=0.0, hz=100;
		(SinOsc.ar(hz) * amp).dup;
	}).send(s);

	~sines = Array.fill(~gridw, { arg x; Array.fill(~gridh, { arg y;
		var hz;
		hz = ~ratios[y + ( x * ~gridh)] * ~basehz;
		postln(hz);
		//Synth.new(\sine, [\hz, ~xratios[x] * ~yratios[y] * ~basehz], s);
		Synth.new(\sine, [\hz, hz, \amp, 0.0], s);
	})});
};