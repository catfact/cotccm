{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green115\blue0;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs26 \cf2 s = \cf3 Server\cf2 .default;\
\
\cf4 //s.boot;\cf2 \
s.waitForBoot\{ \cf3 Routine\cf2 \{\
	\
	\cf3 SynthDef\cf2 .new(\cf5 \\ampTrigDelay\cf2 , \{\
		\cf3 arg\cf2  buf, \
			in=0, out=0, level=1.0,\
			triggeroutbus, signaloutbus,\
			amp_thresh_hi = 0.398,\
			amp_thresh_lo = 0.158,\
			delaytime = 3.0,\
			attacktime=1.0, releasetime = 4.0,\
			outampattack=0.2, outamprelease = 1.0;\
		\cf3 var\cf2  delay, amp, delayamp, trig, input, outamp;\
		input = \cf3 SoundIn\cf2 .ar(in);\
		delay = \cf3 BufDelayN\cf2 .ar(buf, input, delaytime);\
		amp = \cf3 Amplitude\cf2 .kr(input, attacktime, releasetime);\
		delayamp = \cf3 Amplitude\cf2 .kr(delay, attacktime, releasetime);\
		trig = \cf3 Schmidt\cf2 .kr(\
			amp.max(delayamp),\
			amp_thresh_lo,\
			amp_thresh_hi\
		);\
		outamp = \cf3 LagUD\cf2 .kr(trig, outampattack, outamprelease);\
		\cf3 Out\cf2 .ar(signaloutbus, delay * outamp);\
		\cf3 Out\cf2 .kr(triggeroutbus, outamp);\
	\}).send(s);\
	\
	0.1.wait;\
	\
	~delay_buf = \cf3 Buffer\cf2 .alloc(s, s.sampleRate * 10.0, 1);\
	~trigger_bus = \cf3 Bus\cf2 .control(s, 1);\
	~signal_bus = \cf3 Bus\cf2 .audio(s, 1);\
	\
	\
	0.1.wait;\
	\
	~amptriggerdelay_s = \cf3 Synth\cf2 .new(\cf5 \\ampTrigDelay\cf2 , [\
		\cf5 \\buf\cf2 , ~delay_buf.bufnum,\
		\cf5 \\triggeroutbus\cf2 , ~trigger_bus.index,\
		\cf5 \\signaloutbus\cf2 , ~signal_bus.index\
	], s);\
	\
	~amptriggerdelay_s.set(\cf5 \\amp_thresh_hi\cf2 , -12.dbamp);\
	~amptriggerdelay_s.set(\cf5 \\amp_thresh_lo\cf2 , -24.dbamp);\
	~amptriggerdelay_s.set(\cf5 \\attacktime\cf2 , 0.1);\
	~amptriggerdelay_s.set(\cf5 \\releasetime\cf2 , 4.0);\
	~amptriggerdelay_s.set(\cf5 \\delaytime\cf2 , 2.0);\
	\
	\cf3 SynthDef\cf2 .new(\cf5 \\diskout\cf2 , \{\
		\cf3 arg\cf2  buf, signalinbus, framesoutbus;\
		\cf3 var\cf2  input, trigger, framesout;\
		framesout = \cf3 DiskOut\cf2 .ar(buf, \cf3 In\cf2 .ar(signalinbus));\
		\cf3 Out\cf2 .kr(framesoutbus, framesout);\
	\}).send(s);\
	\
	~framesout_bus = \cf3 Bus\cf2 .control(s, 1);\
	\
	~diskout_buf = \cf3 Buffer\cf2 .alloc(s, 65536, 1);\
	\
	\
	0.1.wait;\
	\
	~diskout_buf.write((\cf6 "~/spaces_record_"\cf2 ++\cf3 Date\cf2 .getDate.dayStamp ++ \cf6 "_"\cf2  ++ \cf3 Date\cf2 .getDate.secStamp ++ \cf6 ".aiff"\cf2 ).standardizePath, \cf6 "aiff"\cf2 , \cf6 "int16"\cf2 , 0, 0, \cf3 true\cf2 );\
	\
	~diskout_s = \cf3 Synth\cf2 .new(\cf5 \\diskout\cf2 , [\
		\cf5 \\buf\cf2 , ~diskout_buf.bufnum,\
		\cf5 \\signalinbus\cf2 , ~signal_bus.index,\
		\cf5 \\framesoutbus\cf2 , ~framesout_bus.index\
	], ~amptriggerdelay_s, \cf5 \\addAfter\cf2 );\
	\
	~diskout_s.run(\cf3 false\cf2 );\
	\
	\cf3 SynthDef\cf2 .new(\cf5 \\pause\cf2 , \{\
			\cf3 arg\cf2  triggerinbus=0, targetnode=1000, thresh=0.0001;\
			\cf3 Pause\cf2 .kr(\cf3 In\cf2 .kr(triggerinbus) >= thresh, targetnode);\
	\}).send(s);\
	\
	\
	0.1.wait;\
	\
	~diskout_pause_s = \cf3 Synth\cf2 .new(\cf5 \\pause\cf2 , [\
		\cf5 \\triggerinbus\cf2 , ~trigger_bus.index,\
		\cf5 \\targetnode\cf2 , ~diskout_s.nodeID\
	], ~amptriggerdelay_s, \cf5 \\addAfter\cf2 );\
\
\}.play; \}; \
\
\cf4 /*\
/// TO STOP:\
~diskout_s.free;\
~diskout_buf.close;\
~diskout_buf.free;\
*/}