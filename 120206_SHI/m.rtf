{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 m = \cf3 Cf40h\cf2 .new;\
\
m.prefix = \cf4 '/40h'\cf2 ;\
m.clear;\
\
\cf5 //// quads\cf2 \
m.press = \{\};\
m.lift = \{\};\
m.pressFunctions.clear;\
m.liftFunctions.clear;\
\
m.clear;\
\
~quad = \cf3 CfQuad\cf2 .new(4);\
\
m.pressFunctions.add(\cf4 'quad'\cf2 ->\{\cf3 arg\cf2  x, y;\
	if (x < 4, \{\
		if(y < 4, \{\
			~quad.press(x, y);\
		\});\
	\});\
\});\
\
m.liftFunctions.add(\cf4 'quad'\cf2 ->\{\cf3 arg\cf2  x, y;\
	if (x < 4, \{\
		if(y < 4, \{\
			~quad.lift(x, y);\
		\});\
	\});\
\});\
\
\
s = \cf3 Server\cf2 .default.waitForBoot \{ \cf3 Routine\cf2  \{\
	~r_buf = \cf3 Buffer\cf2 .alloc(s, s.sampleRate * 2.0, 1);\
	~ch_buf = \cf3 Buffer\cf2 .alloc(s, s.sampleRate * 2.0, 1);\
	\
	s.sync;\
	\
	\cf5 // continuous loop record\cf2 \
	~r_s = \{ \cf3 RecordBuf\cf2 .ar(\cf3 SoundIn\cf2 .ar(0), ~r_buf.bufnum, loop:1); \}.play;\
\
	\cf5 // grain synth\cf2 \
	~ch_s = \cf3 SynthDef\cf2 .new(\cf4 \\ch\cf2 , \{\
		\cf3 arg\cf2  buf=0, gate=1, level=1.0,\
		rate=1.0, trate = 12.0, tdust=1.0, dur=0.25, posrate=0.35,\
		atk=0.001, rel=1.3, curve=4.0;\
		\cf3 var\cf2  amp, out, trig, pos;\
		trig = \cf3 LFPulse\cf2 .kr(trate) + (\cf3 Dust\cf2 .kr(trate) * tdust);\
		amp = \cf3 EnvGen\cf2 .ar(\cf3 Env\cf2 .asr(atk, 1, rel, curve), gate:gate, doneAction:0);\
		pos = \cf3 LFNoise1\cf2 .kr(posrate).abs * 0.8 + 0.1;\
		out = \cf3 BufGrain\cf2 .ar(trig, dur, buf, rate, pos);\
		\cf3 Out\cf2 .ar(0, out * amp * level);\
	\}).play(s, [\cf4 \\buf\cf2 , ~ch_buf.bufnum]);\
	\
	s.sync;\
	\
	~chs = \cf3 Array\cf2 .fill(8, \{\cf3 arg\cf2  i; \cf3 Array\cf2 .fill(8, \{\cf3 arg\cf2  j; \
		\cf3 Synth\cf2 .new(\cf4 \\ch\cf2 , [\cf4 \\buf\cf2 , ~r_buf.bufnum, \cf4 \\rate\cf2 , ~geowrap.value(i+j, 4.0) * 0.5, \cf4 \\atk\cf2 , 0.001, \cf4 \\rel\cf2 , 0.001, \cf4 \\gate\cf2 , 0, \cf4 \\level\cf2 , 0.35]);\
	\}); \});\
\
\}.play; \};\
\
~ch_start = \{\
	~r_buf.copyData(~ch_buf);\
	~ch_s.set(\cf4 \\gate\cf2 , 1);\
\};\
\
~ch_stop = \{\
	~ch_s.set(\cf4 \\gate\cf2 , 0);\
\};\
\
\
~quad.toggle = \cf3 false\cf2 ;\
~quad.quadState = 0;\
~quad.onAction = \{\
	4.do(\{ \cf3 arg\cf2  i;\
		4.do(\{ \cf3 arg\cf2  j;\
			m.led(i, j, 1);\
		\});\
	\});	\
	~ch_start.value;\
\};\
~quad.offAction = \{\
	4.do(\{ \cf3 arg\cf2  i;\
		4.do(\{ \cf3 arg\cf2  j;\
			m.led(i, j, 0);\
		\});\
	\});	\
\
	~ch_stop.value;\
\};\
\
\
~geowrap = \{ \cf3 arg\cf2  in, wrapfactor=2.0;\
\'a0\'a0\'a0 \cf3 var\cf2  wrapped, wrapit;\
\'a0\'a0\'a0 wrapped = 1.0;\
\'a0\'a0\'a0 wrapit = \{ \cf3 arg\cf2  v;\
\'a0\'a0\'a0 \'a0\'a0\'a0 if (v < wrapfactor, \{\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 wrapped = v;\
\'a0\'a0\'a0 \'a0\'a0\'a0 \}, \{\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 if ( v < 1.0, \{\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 v = v * wrapfactor;\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 wrapit.value(v);\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \}, \{\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 v = v / wrapfactor;\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 wrapit.value(v);\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \});\
\'a0\'a0\'a0 \'a0\'a0\'a0 \});\
\'a0\'a0\'a0 \};\
\'a0\'a0\'a0 wrapit.value(in);\'a0\'a0\'a0 \
\'a0\'a0\'a0 wrapped\
\};\'a0\'a0\'a0 \
\
\
m.pressFunctions.add(\cf4 'non_quad'\cf2  -> \{ \cf3 arg\cf2  x, y;\
	if ((x >= 4) || (y >= 4), \{\
		~chs[x][y].set(\cf4 \\gate\cf2 , 1);	\
		m.led(x, y, 1);\
	\});\
\});\
\
m.liftFunctions.add(\cf4 'non_quad'\cf2  -> \{ \cf3 arg\cf2  x, y;\
	if ((x >= 4) || (y >= 4), \{\
		~chs[x][y].set(\cf4 \\gate\cf2 , 0);	\
		m.led(x, y, 0);	\
	\});\
\});}