{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 m = \cf2 Cf40h\cf0 .new;\
\
m.prefix = \cf3 '/40h'\cf0 ;\
m.clear;\
\
\cf4 //// quads\cf0 \
m.press = \{\};\
m.lift = \{\};\
m.pressFunctions.clear;\
m.liftFunctions.clear;\
\
m.clear;\
\
~quad = \cf2 CfQuad\cf0 .new(4);\
\
m.pressFunctions.add(\cf3 'quad'\cf0 ->\{\cf2 arg\cf0  x, y;\
	if (x < 4, \{\
		if(y < 4, \{\
			~quad.press(x, y);\
		\});\
	\});\
\});\
\
m.liftFunctions.add(\cf3 'quad'\cf0 ->\{\cf2 arg\cf0  x, y;\
	if (x < 4, \{\
		if(y < 4, \{\
			~quad.lift(x, y);\
		\});\
	\});\
\});\
\
\
s = \cf2 Server\cf0 .default.waitForBoot \{ \cf2 Routine\cf0  \{\
	~r_buf = \cf2 Buffer\cf0 .alloc(s, s.sampleRate * 2.0, 1);\
	~ch_buf = \cf2 Buffer\cf0 .alloc(s, s.sampleRate * 2.0, 1);\
	\
	s.sync;\
	\
	\cf4 // continuous loop record\cf0 \
	~r_s = \{ \cf2 RecordBuf\cf0 .ar(\
		\cf2 HPF\cf0 .ar(\cf2 SoundIn\cf0 .ar(0), 100), ~r_buf.bufnum, loop:1);\
		\cf2 Out\cf0 .ar(0, 0);\
	\}.play;\
\
	\cf4 // grain synth\cf0 \
	~ch_s = \cf2 SynthDef\cf0 .new(\cf3 \\chopy\cf0 , \{\
		\cf2 arg\cf0  buf=0, gate=0, level=1.0,\
		rate=1.0, trate = 12.0, tdust=1.0, dur=0.25, posrate=0.35,\
		atk=0.001, rel=1.3, curve=4.0;\
		\cf2 var\cf0  amp, out, trig, pos;\
		trig = \cf2 LFPulse\cf0 .kr(trate) + (\cf2 Dust\cf0 .kr(trate) * tdust);\
		amp = \cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 .asr(atk, 1, rel, curve), gate:gate, doneAction:0);\
		pos = \cf2 LFNoise1\cf0 .kr(posrate).abs * 0.8 + 0.1;\
		out = \cf2 BufGrain\cf0 .ar(trig, dur, buf, rate, pos);\
		\cf2 Out\cf0 .ar(0, out * amp * level);\
	\}).play(s, [\cf3 \\buf\cf0 , ~ch_buf.bufnum]);\
	\
	s.sync;\
	\
	~chs = \cf2 Array\cf0 .fill(8, \{\cf2 arg\cf0  i; \cf2 Array\cf0 .fill(8, \{\cf2 arg\cf0  j; \
		\cf2 Synth\cf0 .new(\cf3 \\chopy\cf0 , [\cf3 \\buf\cf0 , ~r_buf.bufnum, \cf3 \\rate\cf0 , ~geowrap.value(i+j, 4.0) * 0.5, \cf3 \\atk\cf0 , 0.001, \cf3 \\rel\cf0 , 0.001, \cf3 \\gate\cf0 , 0, \cf3 \\level\cf0 , 0.35]);\
	\}); \});\
\
\}.play; \};\
\
~ch_start = \{\
	~r_buf.copyData(~ch_buf);\
	~ch_s.set(\cf3 \\gate\cf0 , 1);\
\};\
\
~ch_stop = \{\
	~ch_s.set(\cf3 \\gate\cf0 , 0);\
\};\
\
\
~quad.toggle = \cf2 false\cf0 ;\
~quad.quadState = 0;\
~quad.onAction = \{\
	4.do(\{ \cf2 arg\cf0  i;\
		4.do(\{ \cf2 arg\cf0  j;\
			m.led(i, j, 1);\
		\});\
	\});	\
	~ch_start.value;\
\};\
~quad.offAction = \{\
	4.do(\{ \cf2 arg\cf0  i;\
		4.do(\{ \cf2 arg\cf0  j;\
			m.led(i, j, 0);\
		\});\
	\});	\
\
	~ch_stop.value;\
\};\
\
\
~geowrap = \{ \cf2 arg\cf0  in, wrapfactor=2.0;\
\'a0\'a0\'a0 \cf2 var\cf0  wrapped, wrapit;\
\'a0\'a0\'a0 wrapped = 1.0;\
\'a0\'a0\'a0 wrapit = \{ \cf2 arg\cf0  v;\
\'a0\'a0\'a0 \'a0\'a0\'a0 if (v < wrapfactor, \{\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 wrapped = v;\
\'a0\'a0\'a0 \'a0\'a0\'a0 \}, \{\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 if ( v < 1.0, \{\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 v = v * wrapfactor;\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 wrapit.value(v);\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \}, \{\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 v = v / wrapfactor;\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 wrapit.value(v);\
\'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \});\
\'a0\'a0\'a0 \'a0\'a0\'a0 \});\
\'a0\'a0\'a0 \};\
\'a0\'a0\'a0 wrapit.value(in);\'a0\'a0\'a0 \
\'a0\'a0\'a0 wrapped\
\};\'a0\'a0\'a0 \
\
\
m.pressFunctions.add(\cf3 'non_quad'\cf0  -> \{ \cf2 arg\cf0  x, y;\
	if ((x >= 4) || (y >= 4), \{\
		~chs[x][y].set(\cf3 \\gate\cf0 , 1);	\
		m.led(x, y, 1);\
	\});\
\});\
\
m.liftFunctions.add(\cf3 'non_quad'\cf0  -> \{ \cf2 arg\cf0  x, y;\
	if ((x >= 4) || (y >= 4), \{\
		~chs[x][y].set(\cf3 \\gate\cf0 , 0);	\
		m.led(x, y, 0);	\
	\});\
\});}