Routine {
	
	SynthDef.new(\sinesaw, {
		arg out=0, amp=0.25,
		hz=220, sine=0.5, saw=0.25,
		cutoff=2.0, rq=0.5,
		atk=0.125, rel=2.0, gate=1,
		amplag=0.001, hzlag=0.001;
		
		var env, osc;

		amp = Lag.kr(amp, amplag);
		hz = Lag.kr(hz, hzlag);
		
		env = EnvGen.ar(Env.asr(atk, 1.0, rel), gate:gate, doneAction:2) * amp;
		osc = SinOsc.ar(hz, mul:sine, add:Saw.ar(hz, mul:saw));
		
		osc = LPF.ar(osc, hz*cutoff, rq, mul:env);
		Out.ar(out, osc.dup);
	}).send(s);
	
	s.sync;
	
	//~hzl.plot(discrete:true)
	
	~hzi = Array.series(100, 100, 2);
	~oscg = Group.new(s);
	~osc = ~hzi.collect({ arg i;
		Synth.new(\sinesaw, [
			\amp, 0.0,
			\hz, ~hzl[i]
		], ~oscg);
	});

	// function to spawn a routine for flipping amplitude on a given osc
	// parameters for mod-mult-feedback : x_1 = ( a * x_0 ) % b
	~nosc = 10;
	~spwampr = {
		arg osci, 
		timebase=0.25,
		a=5, b=4;

		~osc.add(		Synth.new(\sinesaw, [
			\amp, 0.0,
			\hz, ~hzl[i]
		], ~oscg)

		Routine {		
			var x, amp;
			amp = 0.0;
			x = 1;
			inf.do({ 
				x = (x * a) % b;
				[x, amp].postln;
				if(amp > 0.0, { amp = 0.0 }, { amp = 1.0 / ~nosc; });
				~osc[osci].set(\amp, amp);
				(timebase * x).wait;
			});
		}.play;
};


r = List.new;

/*
~nosc = 10;
~nosc.do({ arg i;
	r.add(
		~spwampr.value(
			200 + (i *10),
			1 / (2 ** (i / 10)),
			((i*5)%5) + 4,
			((i+2)*(i+1)) % 13 + 7
		);
	);
});
*/


~nosc = 10;	
	r.add( ~spwampr.value(0, 0.25, 4, 13); );
	r.add( ~spwampr.value(2, 0.25, 4, 14); );
	r.add( ~spwampr.value(10, 0.25, 6, 17); );
	r.add( ~spwampr.value(12, 0.25, 6, 19); );
	r.add( ~spwampr.value(20, 0.25, 9, 19); );
	r.add( ~spwampr.value(24, 0.25, 9, 21); );

	r.add( ~spwampr.value(40, 0.25, 8, 17); );
	r.add( ~spwampr.value(42, 0.25, 8, 19); );
	r.add( ~spwampr.value(60, 0.25, 11, 19); );
	r.add( ~spwampr.value(64, 0.25, 11, 21); );

/*

	r.add( ~spwampr.value(106, 0.25, 5, 4); );
	r.add( ~spwampr.value(100, 0.25, 5, 4); );
	r.add( ~spwampr.value(170, 0.125, 13, 6); );
	r.add( ~spwampr.value(170, 0.125, 13, 6); );
	r.add( ~spwampr.value(170, 0.125, 13, 6); );
	r.add( ~spwampr.value(220, 0.25, 8, 5); );
	r.add( ~spwampr.value(220, 0.25, 8, 5); );
	r.add( ~spwampr.value(220, 0.25, 8, 5); );
	r.add( ~spwampr.value(300, 0.125, 13, 9); );
	r.add( ~spwampr.value(300, 0.125, 13, 9); );
	r.add( ~spwampr.value(300, 0.125, 13, 9); );

*/

}.play;



/*
r.do({ |rt| rt.stop; });
*/



//~oscg.set(\amp, 0);

/*
r.do({ arg rt; rt.stop; }); ~oscg.set(\amp, 0); r.clear;
*/