Routine {

	~rlen = 30.0;
	~nl = 8;
	// record buffer
	~fltrbuf = Buffer.alloc(s, s.sampleRate * ~rlen, 1);
	// loop buffers (copies)
	~fltlbuf = Array.fill(~nl, { Buffer.alloc(s, s.sampleRate * ~rlen, 1) });

	SynthDef.new(\rec, {
		arg in=0, buf=0,
		reclevel=1.0, prelevel=0.0, offset=0.0, trig=1.0, loop=1, run=1;

		RecordBuf.ar(In.ar(in, 1),
			bufnum: buf, 
			offset:0,
			recLevel:reclevel,
			preLevel:prelevel,
			run:run,
			loop:loop,
			trigger:trig
		);
	}).send(s);
	s.sync;


	/// normalized filter
	SynthDef.new(\normrlpf, {
		arg in=0, out=0, hz=110, rq=1.0, normlev=0.5, normmix=0.5, amp=0.5, dur=1.0;
		var snd;
		snd = In.ar(in);
		snd = (snd * 1-normmix) + (normmix * Normalizer.ar(snd, level:normlev, dur:dur) );
		snd = RLPF.ar(snd, hz, rq);
		Out.ar(out, snd * amp);
	}).send(s);
	s.sync;

	~hzb = Bus.control(s, 1);
	~inb = Bus.audio(s, 1);
	~ins = { Out.ar(~inb.index, SoundIn.ar(0)); }.play(s);

	~flt = Synth.new(\normrlpf, [\in, ~inb], ~ins, \addAfter);

	/// sweep function
	~swp = { arg target, dur;
		Routine{
			~swps.free;
			s.sync;				
			~hzb.get({ arg hz; 
				~swps =  { Out.kr(~hzb.index, Line.kr(hz, target, dur)) }.play;
			});
		}.play;
};
/// record and stop-record functions

~flt_recstart = {
~fltr = Synth.new(\rec, [\in, ~inb.index, \buf, ~fltrbuf.bufnum]);
~flt_rect = SystemClock.seconds;
};


~flt_recstop = { arg target;
var dur;
~fltr.free;
dur = SystemClock.seconds - ~flt_rect;
~fltr_buf.copyData(~fltl_buf[target], numSamples:(dur * s.sampleRate));
};


//// playback at pitched ratio



// spectral invert