{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf430
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green115\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 s = \cf2 Server\cf0 .local;\
\
\
\cf3 //s.boot;\cf0 \
\cf3 //s.freeAll;\cf0 \
\
s.waitForBoot \{\
\
\cf2 SynthDef\cf0 .new(\cf4 \\chopgr_2out\cf0 , \{\
	\cf2 arg\cf0  buf=0,\
		out=0,\
		level=1.0, pitch=1.0,\
		hz_pulse=4.0, hz_pos=1.8, hz_pan=0.85,\
		pos_lag=0.25,\
		r0 = 1.5, r1=2.5,\
		pos_min=0.0, pos_max=1.0, pos_off = 0.0,\
		width0=0.5;\
	\
	\cf2 var\cf0  pulse, pos, pan, output;\
	\
	pulse = \cf2 LFPulse\cf0 .kr(\
		hz_pulse * (1 + (\cf2 VarSaw\cf0 .kr(hz_pulse*r0, 0.25, 0.25))),\
		0.0,\
		width0 * (1 - (\cf2 VarSaw\cf0 .kr(hz_pulse*r1, 0.4, 0.4)))\
	);\
	\
	pos = \cf2 LFPulse\cf0 .kr(\
		hz_pos * (1 + (\cf2 VarSaw\cf0 .kr(hz_pos*r0, 0.25, 0.25))),\
		0.0,\
		width0 * (1 - (\cf2 VarSaw\cf0 .kr(hz_pos*r1, 0.4, 0.4))),\
		pos_min - pos_max,\
		pos_min\
	);\
	\
	pan = LF\cf2 Saw\cf0 .kr(\
		hz_pan * (1 + (\cf2 VarSaw\cf0 .kr(hz_pan*r0, 0.25, 0.25))),\
		0.0,\
		width0 * (1 - (\cf2 VarSaw\cf0 .kr(hz_pan*r1, 0.4, 0.4))),\
		2,\
		-1\
	);\
	\
	output = \cf2 TGrains\cf0 .ar(2, pulse, buf, pitch, (pos+pos_off).wrap(0.0, 1.0) * \cf2 BufDur\cf0 .kr(buf), 5.0 / hz_pulse, pan);\
	\
	\cf2 Out\cf0 .ar(out, output);\
\}).send(s);\
\
\
\
~buf = \cf2 Buffer\cf0 .alloc(s, s.sampleRate * 32.0, 1, \{\
\
\cf2 SystemClock\cf0 .sched(4.0, \{\
\
\
~gg = \cf2 Group\cf0 .tail(s);\
\
~rec = \cf2 Synth\cf0 .new(\cf4 \\record_adc\cf0 , [\cf4 \\buf\cf0 , ~buf.bufnum, \cf4 \\run\cf0 , 1, \cf4 \\in\cf0 , 1], ~gg, \cf4 \\addBefore\cf0 );\
\
\cf3 // array of grain synths\cf0 \
~gs = \cf2 Array\cf0 .fill(16, \{ \cf2 |i|\cf0 \
	\cf2 var\cf0  hz, rat, mod, pos_min, pos_max, rate, dur;\
	\
	if ((i%5)>0, \{rate = ((i%3)+1)/((i%2)+1)\}, \{rate = 1.0\});\
	\
	hz = 2.0 * (1.0 + (i/4.0));\
	dur = (1.0/hz) / 32.0;\
	\
	pos_min = dur + ((1.0 - dur) * i/30.0);\
	pos_max = (pos_min + 0.5).wrap(dur, 1.0 - dur);\
	postln(\cf5 " "\cf0  ++ pos_min ++ \cf5 " ; "\cf0  ++ pos_max ++ \cf5 " ; "\cf0  ++ rate);\
	\
	\cf2 Synth\cf0 .newPaused(\cf4 \\chopgr_2out\cf0 ,[\
		\cf4 \\buf\cf0 , ~buf.bufnum,\
		\cf4 \\hz_pulse\cf0 , hz,\
		\cf4 \\pos_min\cf0 , pos_min,\
		\cf4 \\pos_max\cf0 , (pos_min + 0.5).wrap(1.0/hz, 1.0 - (1.0/hz)),\
		\cf4 \\pitch\cf0 , rate\
	]);\
\});\
	\
\cf2 SystemClock\cf0 .sched(6, \{\
\
\cf2 Routine\cf0 (\{ 16.do(\{\
	\cf2 arg\cf0  i;\
	~gs[i].run(\cf2 true\cf0 );\
	i.postln;\
	32.wait;\
\})\}).play;\
\
\cf2 nil\cf0  \}); 	\cf3 // sched\cf0 \
\cf2 nil\cf0  \}); \cf3 // sched\cf0 \
\}); 	\cf3 // buf alloc completion\cf0 \
\}; \cf3 // waitforboot\cf0 \
}