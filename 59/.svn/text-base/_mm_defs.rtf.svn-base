{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf430
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 \
\cf2 SynthDef\cf0 .new(\cf3 \\vorg_1shot\cf0 , \
\{	\cf2 arg\cf0  out=0, timbre1_0, timbre1_1, timbre2_0, timbre2_1, timbre3_0, timbre3_1, freq=440, gate=1, level=0.1, attack=0.1, release=0.1, dur=10, filter_level=0.0, noise_level = 0.0, sub_level=1.0, numbufs=4, basebuf=0;\
	\cf2 var\cf0  timbre1, timbre2, timbre3, sin, saw, ring, saws, amp, saw_amp, env, noise, filter;\
	timbre1 = \cf2 Line\cf0 .kr(timbre1_0, timbre1_1, attack + dur + release);\
	timbre2 = \cf2 Line\cf0 .kr(timbre2_0, timbre2_1, attack + dur + release);\
	timbre3 = \cf2 Line\cf0 .kr(timbre3_0, timbre3_1, attack + dur + release);\
	env = \cf2 Env\cf0 .linen(attack, dur, release, 1, \cf3 'lin'\cf0 );\
	amp = \cf2 EnvGen\cf0 .ar(env, gate, 1, doneAction:2);\
	saw_amp = \cf2 EnvGen\cf0 .ar(env, gate, timeScale:2.0);\
	\cf4 //rq = 5.5 - EnvGen.ar(env, gate, 4.0, 0, 2.4); \cf0 \
	saw = \cf2 SyncSaw\cf0 .ar(freq, freq * (2 ** (3 * timbre2)));\
	sin = \cf2 Mix\cf0 .new([\cf2 VOsc\cf0 .ar((timbre1 * numbufs) + basebuf, freq), \cf2 FSinOsc\cf0 .ar(freq * 0.5) * sub_level]);\
	ring = sin * saw;\
	saws = \cf2 Mix\cf0 .new([saw * timbre3, ring * timbre3]) * saw_amp;\
	noise = \cf2 LFNoise2\cf0 .ar(freq * 64, sin + saws) * noise_level;\
	filter = \cf2 LPF\cf0 .ar(\cf2 Mix\cf0 .new([sin, saws, noise]), freq + (filter_level * (9000-freq)));\
	\cf2 Out\cf0 .ar(out, filter * amp * level);\
\}).load(s);\
\
\
\
\
\cf2 SynthDef\cf0 .new(\cf3 \\shapedelay_env\cf0 , \{\cf2 arg\cf0  in=0, out=1, delbuf=0, shapebuf=0, delaytime=0, level=1, freq=440, attack=1, release=1, gate=1, lpf_freq=2000, hpf_freq=80;\
	\cf2 var\cf0  sig, amp, env;\
	sig = \cf2 HPF\cf0 .ar(\cf2 LPF\cf0 .ar(\cf2 BufDelayN\cf0 .ar(delbuf, \cf2 In\cf0 .ar(in, 1), delaytime), lpf_freq), hpf_freq);\
	sig = \cf2 Shaper\cf0 .ar(shapebuf, sig);\
	sig = \cf2 RLPF\cf0 .ar(sig, \cf2 Lag\cf0 .kr(freq, delaytime), 0.4); \
	env = \cf2 Env\cf0 .asr(attack, 1, release);\
	amp = \cf2 EnvGen\cf0 .ar(env, gate, 1, doneAction:2);\
	\cf2 Out\cf0 .ar(out, sig*amp*level);\
\}).load(s);\
 }