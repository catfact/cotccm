{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf430
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 ///number of masses\cf3 \
n = 64;\
\cf2 // nonlinear paramtere \cf3 \
a = 2.5;\
\cf2 // time step of simulation\cf3 \
~dt = 0.02;\
\cf2 // force constant\cf3 \
k = 1.1;\
\cf2 // damping coefficient\uc0\u8232 //d = 0.999;\cf3 \
d = 0.975;\
\
\cf2 // mass positions\cf3 \
~pos = \cf4 Array\cf3 .fill(n, \{0.0\});\
\cf2 // mass velocities\cf3 \
~vel = \cf4 Array\cf3 .fill(n, \{0.0\});\
\cf2 // mass accelerations\cf3 \
~acc = \cf4 Array\cf3 .fill(n, \{0.0\});\
\
~iter = \{\
	n.do(\{\
		\cf4 arg\cf3  i;\
		\cf4 var\cf3  dist;\
		\cf2 // alternately:     F(x) = -k x + b x3 \cf3 \
		\cf2 // displacement distance:\cf3 \
		dist = ~pos[(i+1).wrap(0, n-1)] - ~pos[i];\
		dist = dist + ~pos[(i-1).wrap(0, n-1)] - ~pos[i];\
		\
		~acc[i] = -1* k * dist + (a * dist * dist * dist);\
		\
		\cf2 // update velocity from acceleration\cf3 \
		~vel[i] = ~vel[i] + (~acc[i] * ~dt);\
		\cf2 // damping\cf3 \
		~vel[i] = ~vel[i] * d;\
				\
		\cf2 // update position from velocity\cf3 \
		~pos[i] = ~pos[i] + (~vel[i] * ~dt);\
		~pos[i] = ~pos[i].wrap(-1.0, 1.0);\
		\
		~voscs[i].set(\cf5 \\index\cf3 , 0.6 * (~pos[i].abs));\
		\cf2 //if((28 < i) && (i<35), \{~fpdels[i-28].set(\\amp, ~pos[i].abs * ~delaylevel)\});\cf3 \
		\
	\});\
\};\
\
\cf2 //w = SCWindow("_", Rect(100, 100, 640, 480));\cf3 \
\cf2 //w.front;\cf3 \
\cf2 //w.refresh;\cf3 \
\
\cf2 //w.onClose = \{r.stop; AppClock.clear; SystemClock.clear; \};\cf3 \
w.drawHook = \
\{\
	~pos.do(\{ \cf4 arg\cf3  pos, i;\
		if (pos > 0, \{\
			\cf4 Pen\cf3 .fillColor = \cf4 Color\cf3 .new(pos, pos, pos);\
		\}, \{\
			\cf4 Pen\cf3 .fillColor = \cf4 Color\cf3 .new(pos * -1, pos * -0.5, pos * -0.5);\
		\});\
		\cf4 Pen\cf3 .fillRect(\cf4 Rect\cf3 (i * (640/n), 0, 640/n, 480));\
	\});\
\};\
	\
\
~wait = 0.1;\
\
r = \cf4 Routine\cf3 (\{ \cf4 inf\cf3 .do(\{ \cf4 |i|\cf3 \
	~iter.value;\
	\{ \
		\cf2 //~graph.value = ~pos * 0.5 + 0.5;\cf3 \
		w.refresh;\
	\}.defer;\
\cf2 //	~pos.postln;\cf3 \
	~wait.wait;\
\})\});\
	\
r.play;\
\cf2 /*\
r.stop;\
*/\cf3 \
\cf4 SystemClock\cf3 .sched(20.0, \{\
~pos[n / 2] = 0.2;\
\cf4 nil\cf3 ; \});\cf2 // sched\cf3 \
\
\cf4 SystemClock\cf3 .sched(160.0, \{\
d = 0.999;\
~pos[n / 2] = 0.8;\
\cf4 nil\cf3 ; \});\cf2 // sched\cf3 \
\
\cf4 SystemClock\cf3 .sched(420.0, \{\
d = 0.999;\
~pos[18] = 0.8;\
\cf4 nil\cf3 ; \});\cf2 // sched\cf3 \
\
\
\cf4 SystemClock\cf3 .sched(480.0, \{\
d = 0.999;\
~pos[51] = -0.8;\
\cf4 nil\cf3 ; \});\cf2 // sched\cf3 \
\
\
\cf2 //r.stop;\cf3 \
\
\cf2 /*\
// stopping time\
k = 0.1;\
a = 0.1;\
d = 1.0;\
~pos[5] = -0.5;\
\
~vg.set(\\gate, 0);\
*/\cf3 \
\
\cf2 /*\
w.drawHook = \{\};\
r.stop;\
*/}