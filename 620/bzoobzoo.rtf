{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 /*\
xs = Server.local;\
s.boot;\
*/\cf0 \
\
\cf3 Routine\cf0  \{\
\
\cf3 SynthDef\cf0 .new(\cf4 \\delcomp\cf0 , \{\cf3 arg\cf0  in=0, zin=1, out=0, amp=0.25, thresh=0.125, slope = -0.25, clamp = 0.005, relax = 0.09, maxdelaytime=6.0, delaytime=4.0;\
	\cf3 var\cf0  input, zinput, comp, output;\
	amp = \cf3 Lag\cf0 .kr(amp, 0.125);\
	input = \cf3 SoundIn\cf0 .ar(in, 1);\
	zinput = \cf3 In\cf0 .ar(zin, 1);\
	\cf2 ///////// first gate\cf0 \
	comp = \cf3 Compander\cf0 .ar(\
		input,		\cf2 // input\cf0 \
		input,		\cf2 // ctl input\cf0 \
		0.5,		\cf2 // thresh\cf0 \
		0.25, 		\cf2 // slope below\cf0 \
		1.0,		\cf2 // slope above\cf0 \
		0.01,		\cf2 // clamp\cf0 \
		0.05,		\cf2 // relaax\cf0 \
		1.0  // mul\
	);\
	\cf2 ///////////// then limit\cf0 \
	comp = \cf3 Compander\cf0 .ar(\
		comp,		\cf2 // input\cf0 \
		zinput,		\cf2 // ctl input\cf0 \
		thresh,		\cf2 // thresh\cf0 \
		1.0, 		\cf2 // slope below\cf0 \
		slope,		\cf2 // slope above\cf0 \
		clamp,		\cf2 // clamp\cf0 \
		relax,		\cf2 // relaax\cf0 \
		1.0 / thresh  \cf2 // mul\cf0 \
	);\
	output = \cf3 DelayC\cf0 .ar(comp, maxdelaytime, delaytime);\
	\cf3 Out\cf0 .ar(out, output * amp);\
\}).send(s);\
\
0.5.wait;\
\
~compsyn = \cf3 Array\cf0 .fill(2, \{\
	\cf3 Synth\cf0 .new(\cf4 \\delcomp\cf0 , [\cf4 \\in\cf0 , 0, \cf4 \\zin\cf0 , 1, \cf4 \\out\cf0 , 1, \cf4 \\amp\cf0 , 0.0], ~og, \cf4 \\addAfter\cf0 );\
\});\
~whichcomp = 0;\
~compamp = 0.0;\
\
\{\
w = \cf3 SCWindow\cf0 .new(\cf5 "_"\cf0 , \cf3 Rect\cf0 (300, 400, 50, 400));\
w.front;\
\
a = \cf3 SCSlider\cf0 .new(w, \cf3 Rect\cf0 (0, 0, 50, 400));\
\
a.action = \{\
	\cf3 var\cf0  db;\
	db = (a.value * 64.0 - 64.0);\
	db.postln;\
	~compamp = db.dbamp;\
	~compsyn[~whichcomp].set(\cf4 \\amp\cf0 , ~compamp) \
\};\
\
\}.defer;\
\
~compsynbutdown = 0.0;\
~compsynbut = ~button_c = \cf3 CCResponder\cf0 (\{ \cf3 |src, chan, num, val|\cf0 \
	\cf3 SystemClock\cf0 .sched(0.0, \{\cf3 arg\cf0  time;\
		\cf3 var\cf0  thetime;\
		thetime = min(time - ~compsynbutdown, 6.0);\
		thetime.postln;\
		~compsyn[~whichcomp].set(\cf4 \\amp\cf0 , 0.0);\
		~whichcomp = (~whichcomp + 1) % 2;\
		~compsyn[~whichcomp].set(\cf4 \\delaytime\cf0 , thetime);\
		~compsyn[~whichcomp].set(\cf4 \\amp\cf0 , ~compamp);\
		~compsynbutdown = time;\
		\cf3 nil\cf0 \
	\});\
\},\
\cf3 nil\cf0 , \cf2 // any source\cf0 \
\cf3 nil\cf0 , \cf2 // any channel\cf0 \
44, \cf2 // "record" button on micro\cf0 \
\cf3 nil\cf0  \cf2 // any value\cf0 \
);\
\
\}.play;}